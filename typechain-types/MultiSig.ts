/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MultiSigInterface extends utils.Interface {
  functions: {
    "confirmerTransaction(uint256)": FunctionFragment;
    "depot()": FunctionFragment;
    "executerTransaction(uint256)": FunctionFragment;
    "getNbrTransactions()": FunctionFragment;
    "getOwners()": FunctionFragment;
    "getTransactionInformation(uint256)": FunctionFragment;
    "isConfirmed(uint256,address)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "nbrConfirmationRequired()": FunctionFragment;
    "owners(uint256)": FunctionFragment;
    "soumettreTx(address,uint256)": FunctionFragment;
    "suppressionConfirmation(uint256)": FunctionFragment;
    "transactions(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "confirmerTransaction"
      | "depot"
      | "executerTransaction"
      | "getNbrTransactions"
      | "getOwners"
      | "getTransactionInformation"
      | "isConfirmed"
      | "isOwner"
      | "nbrConfirmationRequired"
      | "owners"
      | "soumettreTx"
      | "suppressionConfirmation"
      | "transactions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "confirmerTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "depot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executerTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNbrTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTransactionInformation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isConfirmed",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nbrConfirmationRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "soumettreTx",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "suppressionConfirmation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "confirmerTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executerTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNbrTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionInformation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nbrConfirmationRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "soumettreTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suppressionConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;

  events: {
    "AnnulerConfirmationTransaction(address,uint256)": EventFragment;
    "ConfirmTransaction(address,uint256)": EventFragment;
    "Depot(address,uint256)": EventFragment;
    "ExecuterTransaction(address,uint256)": EventFragment;
    "SubmitTransaction(address,uint256,address,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AnnulerConfirmationTransaction"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfirmTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Depot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuterTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitTransaction"): EventFragment;
}

export interface AnnulerConfirmationTransactionEventObject {
  owner: string;
  index: BigNumber;
}
export type AnnulerConfirmationTransactionEvent = TypedEvent<
  [string, BigNumber],
  AnnulerConfirmationTransactionEventObject
>;

export type AnnulerConfirmationTransactionEventFilter =
  TypedEventFilter<AnnulerConfirmationTransactionEvent>;

export interface ConfirmTransactionEventObject {
  owner: string;
  index: BigNumber;
}
export type ConfirmTransactionEvent = TypedEvent<
  [string, BigNumber],
  ConfirmTransactionEventObject
>;

export type ConfirmTransactionEventFilter =
  TypedEventFilter<ConfirmTransactionEvent>;

export interface DepotEventObject {
  sender: string;
  montant: BigNumber;
}
export type DepotEvent = TypedEvent<[string, BigNumber], DepotEventObject>;

export type DepotEventFilter = TypedEventFilter<DepotEvent>;

export interface ExecuterTransactionEventObject {
  owner: string;
  index: BigNumber;
}
export type ExecuterTransactionEvent = TypedEvent<
  [string, BigNumber],
  ExecuterTransactionEventObject
>;

export type ExecuterTransactionEventFilter =
  TypedEventFilter<ExecuterTransactionEvent>;

export interface SubmitTransactionEventObject {
  owner: string;
  transactionIndex: BigNumber;
  destinataire: string;
  valeur: BigNumber;
}
export type SubmitTransactionEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  SubmitTransactionEventObject
>;

export type SubmitTransactionEventFilter =
  TypedEventFilter<SubmitTransactionEvent>;

export interface MultiSig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultiSigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    confirmerTransaction(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depot(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executerTransaction(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getNbrTransactions(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOwners(overrides?: CallOverrides): Promise<[string[]]>;

    getTransactionInformation(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber] & {
        to: string;
        value: BigNumber;
        executee: boolean;
        nbrConfirmations: BigNumber;
      }
    >;

    isConfirmed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nbrConfirmationRequired(overrides?: CallOverrides): Promise<[BigNumber]>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    soumettreTx(
      _to: PromiseOrValue<string>,
      _montant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    suppressionConfirmation(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber] & {
        to: string;
        value: BigNumber;
        executee: boolean;
        nbrConfirmations: BigNumber;
      }
    >;
  };

  confirmerTransaction(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depot(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executerTransaction(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getNbrTransactions(overrides?: CallOverrides): Promise<BigNumber>;

  getOwners(overrides?: CallOverrides): Promise<string[]>;

  getTransactionInformation(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, BigNumber] & {
      to: string;
      value: BigNumber;
      executee: boolean;
      nbrConfirmations: BigNumber;
    }
  >;

  isConfirmed(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nbrConfirmationRequired(overrides?: CallOverrides): Promise<BigNumber>;

  owners(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  soumettreTx(
    _to: PromiseOrValue<string>,
    _montant: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  suppressionConfirmation(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transactions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, BigNumber] & {
      to: string;
      value: BigNumber;
      executee: boolean;
      nbrConfirmations: BigNumber;
    }
  >;

  callStatic: {
    confirmerTransaction(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depot(overrides?: CallOverrides): Promise<void>;

    executerTransaction(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getNbrTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    getOwners(overrides?: CallOverrides): Promise<string[]>;

    getTransactionInformation(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber] & {
        to: string;
        value: BigNumber;
        executee: boolean;
        nbrConfirmations: BigNumber;
      }
    >;

    isConfirmed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nbrConfirmationRequired(overrides?: CallOverrides): Promise<BigNumber>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    soumettreTx(
      _to: PromiseOrValue<string>,
      _montant: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    suppressionConfirmation(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber] & {
        to: string;
        value: BigNumber;
        executee: boolean;
        nbrConfirmations: BigNumber;
      }
    >;
  };

  filters: {
    "AnnulerConfirmationTransaction(address,uint256)"(
      owner?: null,
      index?: null
    ): AnnulerConfirmationTransactionEventFilter;
    AnnulerConfirmationTransaction(
      owner?: null,
      index?: null
    ): AnnulerConfirmationTransactionEventFilter;

    "ConfirmTransaction(address,uint256)"(
      owner?: null,
      index?: null
    ): ConfirmTransactionEventFilter;
    ConfirmTransaction(
      owner?: null,
      index?: null
    ): ConfirmTransactionEventFilter;

    "Depot(address,uint256)"(sender?: null, montant?: null): DepotEventFilter;
    Depot(sender?: null, montant?: null): DepotEventFilter;

    "ExecuterTransaction(address,uint256)"(
      owner?: null,
      index?: null
    ): ExecuterTransactionEventFilter;
    ExecuterTransaction(
      owner?: null,
      index?: null
    ): ExecuterTransactionEventFilter;

    "SubmitTransaction(address,uint256,address,uint256)"(
      owner?: null,
      transactionIndex?: null,
      destinataire?: null,
      valeur?: null
    ): SubmitTransactionEventFilter;
    SubmitTransaction(
      owner?: null,
      transactionIndex?: null,
      destinataire?: null,
      valeur?: null
    ): SubmitTransactionEventFilter;
  };

  estimateGas: {
    confirmerTransaction(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depot(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executerTransaction(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getNbrTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    getOwners(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionInformation(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isConfirmed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nbrConfirmationRequired(overrides?: CallOverrides): Promise<BigNumber>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    soumettreTx(
      _to: PromiseOrValue<string>,
      _montant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    suppressionConfirmation(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    confirmerTransaction(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depot(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executerTransaction(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getNbrTransactions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTransactionInformation(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isConfirmed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nbrConfirmationRequired(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    soumettreTx(
      _to: PromiseOrValue<string>,
      _montant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    suppressionConfirmation(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
